
html(lang="en")
  head
    meta(charset="utf-8")
    meta(
      content="IE=edge" 
      http-equiv="X-UA-Compatible"
      )
    meta(
      content="width=device-width, initial-scale=1.0" 
      name="viewport"
      )
    meta(
      content="" 
      name="description"
      )
    meta(
      content="" 
      name="author"
      )
    title RANIA Dashboard
    link(
      href="../../public/stylesheets/dashboard.css" 
      rel="stylesheet"
      )
<<<<<<< Updated upstream
=======

    script.
      function generateTable(jsonData){
        const table = document.createElement('table');
        //table.setAttribute('id', tableId);
        const keys = Object.keys(jsonData);

        // Create table data rows
        
        for (let i = 0; i < keys.length; i++) {
          const dataRow = table.insertRow(-1);
          //const dataCell = document.createElement('td');
          const rowData = jsonData[keys[i]]
          console.log("[RowData]: ",rowData)
          const rowDataKeys = Object.keys(rowData)
          for(let j = 0; j < rowDataKeys.length; j++){
              const dataCell = document.createElement('td');
              dataCell.textContent = jsonData[keys[i]][rowDataKeys[j]];
              dataRow.appendChild(dataCell);
          }
          //dataCell.textContent = `${jsonData[keys[i]].name} (${jsonData[keys[i]].time})`;
          //dataRow.appendChild(dataCell);
        }

        return table.outerHTML;
      }
    
    script.
      function getDatabaseData(device, db, data){
        const style = data.style
        
        fetch('/data/get-data',{
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({meta_data:{
                    auth_token: "01",
                    sender: "Localhost",
                  },
                 data:{
                  device_name: device,
                  db_name: db,
                 }})
      })
          .then(response => response.json())
          .then(data=> {
            var result = undefined
            if(style == "table"){
              result = generateTable(data)
              document.getElementById("data-area").innerHTML = result
            }
            else{
              console.log("Unhandled data style")
              document.getElementById("data-area").innerHTML = "Unhandled data style"
            }
            
          })
        
      }
      function getAvailableData(key){
          fetch('/data/get-data',{
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({meta_data:{
                    auth_token: "01",
                    sender: "Localhost",
                  },
                 data:{
                  device_name: key,
                  db_name: 'meta_data',
                 }})
      })
          .then(response => response.json())
          .then(data=> populateData(key, data))
      }
          
    script.
      function populateDevices(data){
         
        const table = document.getElementById('devices-table');
        console.log("[populateDevices]: "+ JSON.stringify(data));
        const row = table.insertRow(-1);
        for (const key in data) {
          
          const deviceCell = row.insertCell(0);
          const button = document.createElement('button');
          button.textContent = data[key]['alias'];
          button.onclick = function() {
            getAvailableData(key);
            const label = document.getElementById('device-label')
            label.innerHTML = data[key].alias
          };
          deviceCell.appendChild(button);
        };
      }

      function populateData(device, data){
        console.log("[populateData: ]"+JSON.stringify(data))
        const row = document.getElementById('available-data-table');
        row.innerHTML = ""
        for (const key in data) {
          const deviceCell = row.insertCell(0);
          const button = document.createElement('button');
          button.textContent = key;
          button.onclick = function() {
            
            getDatabaseData(device, key, data[key])
          };
          deviceCell.appendChild(button);
        };
      }
    script.
      async function getDevices(){
        fetch('/data/get-data',{
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({meta_data:{
                    auth_token: "01",
                    sender: "Localhost",
                  },
                 data:{
                  device_name: 'acl',
                  db_name: 'acl',
                 }})
      })
          .then(response => response.json())
          .then(data=> populateDevices(data['devices']))
      }
  script.
      function loadDashboard(){
        getDevices();
        
      }
  script.
      window.onload = function(){
        loadDashboard();
      }
>>>>>>> Stashed changes
  body.sb-nav-fixed
    #layoutSidenav
      .mobile-menu
        input#hamburger(
          value="hamb" 
          name="hamb" 
          type="checkbox"
          )
        label(for="hamb") â˜°
        ul.mobile
          li
            a.nav-link(href="index.html") Manage Devices
          li
            a.nav-link(href="index.html") Edit Resident Info
          li
            a.nav-link(href="index.html") Edit Contact Info
          li
            a.nav-link(href="index.html") Send data to...
      div(id="layoutSidenav_nav")
        nav#sidenavAccordion.sb-sidenav.accordion.sb-sidenav-dark
          .sb-sidenav-menu
            .nav
              a.nav-title(href="index.html") RANIA Home
              .sb-sidenav-menu-heading Settings
              a.nav-link(href="../Settings/settings.pug") Manage Devices
              a.nav-link(href="index.html") Edit Resident Info
              a.nav-link(href="index.html") Edit Contact Info
              a.nav-link(href="index.html") Send data to...
          .sb-sidenav-footer
            .small Logged in as:
            | UserName
      div(id="layoutSidenav_content")
        main
          .container-fluid.px-6
            h1.mt-4 Dashboard
            .row
              .col-auto
<<<<<<< Updated upstream
                .card.scheduleCard
                  .card-text
                    table.schedule-table
                      tbody
                        if events && events.length
                          each event in events
                            tr
                              td #{event.time}
                              td #{event.title}
                        else
                          tr
                            td(colspan="2") No events found.
                  .card-footer.d-flex.align-items-center.justify-content-between
              .col-auto
                .card.deviceListCard
                  .card-body Device List
                    .card-text
                      ul.device-list
                        if devices && devices.length
                          each device in devices
                            li
                              if device
                                .db-button(href=`/device/${device.id}`) #{device.name}
                              else
                                li(colspan="2") No device found.
                        else
                          li(colspan="2") No devices found.
                  .card-footer.d-flex.align-items-center.justify-content-between
                .card.notificationsCard
                  .card-body Notifications
                  .card-text
                    p Notifications
                  .card-footer.d-flex.align-items-center.justify-content-between
              .col-auto
                .card.agendaCard.align-items-center
                  button.dbutton(type='button' onclick="window.location.href='/agenda'") Go to Agenda
                  .card-footer.d-flex.align-items-center.justify-content-between
=======
>>>>>>> Stashed changes
                .card.timeCard
                  p(id="today_date") Today's Date
                  p(id="current_date")
                  script.
                    date = new Date();
                      year = date.getFullYear();
                      month = date.getMonth() + 1;
                      day = date.getDate();
                      document.getElementById("current_date").innerHTML = month + "/" + day + "/" + year;
<<<<<<< Updated upstream
                .card.logoutCard.align-items-center
                  button.dbutton(type='button' onclick="window.location.href='/'") logout
                  .card-footer.d-flex.align-items-center.justify-content-between
=======
                .card.notificationsCard
                  .card-body Notifications
                  .card-text
                    p Notifications
                  .card-footer.d-flex.align-items-center.justify-content-between
              
              .col-auto
                .card.deviceListCard
                  .card-body Devices
                    table.schedule-table#devices-table
                    
                    p#device-label

                    table.schedule-table
                      tr#available-data-table

                    div#data-area
                  .card-footer.d-flex.align-items-center.justify-content-between
               
                
>>>>>>> Stashed changes
  script(
    crossorigin="anonymous" 
    integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" 
    src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"
    )
  script(
    crossorigin="anonymous" 
    integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" 
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"
<<<<<<< Updated upstream
    )
  // script(src="script.js")
script.
    app.get('/agenda', function(req, res) {
      // Query database for calendar events
      const events = db.get('calendar_events').value();
      // Render the agenda view with the retrieved events
      res.render('agenda', { events });
    });
=======
    )
>>>>>>> Stashed changes
