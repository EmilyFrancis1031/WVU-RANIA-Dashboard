html(lang="en")
  head
    meta(charset="utf-8")
    meta(content="IE=edge" http-equiv="X-UA-Compatible")
    meta(content="width=device-width, initial-scale=1.0" name="viewport")
    meta(content="" name="description")
    meta(content="" name="author")

    title RANIA Dashboard

    link(href="../../public/stylesheets/dashboard.css" rel="stylesheet")
    link(href="../../public/stylesheets/button.css" rel="stylesheet")
    link(href="../../public/stylesheets/col.css" rel="stylesheet")
    link(href="../../public/stylesheets/root.css" rel="stylesheet")
    link(href="../../public/stylesheets/hr.css" rel="stylesheet")
    link(href="../../public/stylesheets/container.css" rel="stylesheet")
    link(href="../../public/stylesheets/ul.css" rel="stylesheet")
    link(href="../../public/stylesheets/dropdown.css" rel="stylesheet")
    link(href="../../public/stylesheets/nav.css" rel="stylesheet")
    link(href="../../public/stylesheets/mobile.css" rel="stylesheet")
    link(href="../../public/stylesheets/sb.css" rel="stylesheet")
    link(href="../../public/stylesheets/card.css" rel="stylesheet")
    link(href="../../public/stylesheets/accordion.css" rel="stylesheet")
    link(href="../../public/stylesheets/misc.css" rel="stylesheet")
    link(href="../../public/stylesheets/table.css" rel="stylesheet")
    link(href="../../public/stylesheets/link.css" rel="stylesheet")


    



    script.
      function generateTable(jsonData){
        const table = document.createElement('table');
        //table.setAttribute('id', tableId);
        const keys = Object.keys(jsonData);

        // Create table data rows
        
        for (let i = 0; i < keys.length; i++) {
          const dataRow = table.insertRow(-1);
          //const dataCell = document.createElement('td');
          const rowData = jsonData[keys[i]]
          console.log("[RowData]: ",rowData)
          const rowDataKeys = Object.keys(rowData)
          for(let j = 0; j < rowDataKeys.length; j++){
              const dataCell = document.createElement('td');
              dataCell.textContent = jsonData[keys[i]][rowDataKeys[j]];
              dataRow.appendChild(dataCell);
          }
          //dataCell.textContent = `${jsonData[keys[i]].name} (${jsonData[keys[i]].time})`;
          //dataRow.appendChild(dataCell);
        }

        return table.outerHTML;
      }
    
    script.
      function getDatabaseData(device, db, data){
        const style = data.style
        
        fetch('/data/get-data',{
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({meta_data:{
                    auth_token: "01",
                    sender: "Localhost",
                  },
                 data:{
                  device_name: device,
                  db_name: db,
                 }})
      })
          .then(response => response.json())
          .then(data=> {
            var result = undefined
            if(style == "table"){
              result = generateTable(data)
              document.getElementById("data-area").innerHTML = result
            }
            else{
              console.log("Unhandled data style")
              document.getElementById("data-area").innerHTML = "Unhandled data style"
            }
            
          })
        
      }
      function getAvailableData(key){
          fetch('/data/get-data',{
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({meta_data:{
                    auth_token: "01",
                    sender: "Localhost",
                  },
                 data:{
                  device_name: key,
                  db_name: 'meta_data',
                 }})
      })
          .then(response => response.json())
          .then(data=> populateData(key, data))
      }
          
    script.
      function populateDevices(data){
         
        const table = document.getElementById('devices-table');
        console.log("[populateDevices]: "+ JSON.stringify(data));
        const devices = data['devices']
        const row = table.insertRow(-1);
        for (const key in devices) {
          console.log(key)
          const deviceCell = row.insertCell(0);
          const button = document.createElement('button');
          button.textContent = devices[key]['alias'];
          button.classList.add('btn');
          button.onclick = function() {
            document.getElementById("data-area").innerHTML = ""
            getAvailableData(key);
            const label = document.getElementById('device-label')
            label.innerHTML = devices[key].alias
          };
          deviceCell.appendChild(button);
        };
      }

      function populateData(device, data){
        console.log("[populateData: ]"+JSON.stringify(data))
        const row = document.getElementById('available-data-table');
        row.innerHTML = ""
        for (const key in data) {
          const deviceCell = row.insertCell(0);
          const button = document.createElement('button');
          button.textContent = key;
          button.classList.add('btn2')
          button.onclick = function() {
            
            getDatabaseData(device, key, data[key])
          };
          deviceCell.appendChild(button);
        };
      }
    script.
      async function getDevices(){
        fetch('/data/get-data',{
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({meta_data:{
                    auth_token: "01",
                    sender: "Localhost",
                  },
                 data:{
                  device_name: 'acl',
                  db_name: 'acl',
                 }})
      })
          .then(response => response.json())
          .then(data=> populateDevices(data['devices']))
      }
    script.
      function submitCode(deviceName, alias, code){
        fetch('/data/connect-device',{
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({meta_data:{
                    auth_token: "01",
                    sender: "Localhost",
                  },
                 data:{
                  device_name: deviceName,
                  alias: alias,
                  auth_code: code
        }})
      })
          .then(response => response.json())
          .then(data=> alert(data))
      }
      function rejectDevice(deviceName){
        fetch('/data/remove-data',{
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({meta_data:{
                    auth_token: "01",
                    sender: "Localhost",
                  },
                 data:{
                  device_name: "acl",
                  db_name: "pending_connections",
                  k: deviceName
                 }})
      })
          .then(response => response.json())
          .then(data=> alert(data))
      }
      function populatePendingDevices(data){
        const table = document.getElementById('pending-conns-table');
        console.log("[populatePendingDevices]: "+ JSON.stringify(data));
        const row = table.insertRow(-1);
        for (const key in data) {
          
          var aliasCell = row.insertCell(0);
          aliasCell.innerHTML=data[key].alias

          var connCodeCell = row.insertCell()
          var connCodeForm = document.createElement('input');
          connCodeForm.type = 'text'
          connCodeForm.name = 'ConnectionCode'
          connCodeCell.appendChild(connCodeForm)

          var submitCell = row.insertCell()
          var submitBtn = document.createElement('button');
          submitBtn.textContent = "Submit"
          submitBtn.classList.add('btn-accept')
          submitCell.appendChild(submitBtn);
          submitBtn.addEventListener('click', function() {
            const connCodeValue = connCodeForm.value;
            const deviceName = key
            const alias = data[key].alias
            submitCode(key, alias, connCodeValue)
            //console.log('Submitted connection code:', connCodeValue);
            // Perform any further processing with the connection code value
          });

          var rejectCell = row.insertCell()
          var rejectBtn = document.createElement('button');
          rejectBtn.textContent = "Reject"
          rejectBtn.classList.add('btn-reject')
          rejectCell.appendChild(rejectBtn);
          rejectCell.addEventListener('click', function() {
            rejectDevice(key)
            //console.log('Submitted connection code:', connCodeValue);
            // Perform any further processing with the connection code value
          });
   
        };
      };
      async function getPendingDevices(){
        fetch('/data/get-data',{
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({meta_data:{
                    auth_token: "01",
                    sender: "Localhost",
                  },
                 data:{
                  device_name: 'acl',
                  db_name: 'pending_connections',
                 }})
      })
          .then(response => response.json())
          .then(data=> populatePendingDevices(data))
      }
    script.
        window.onload = function(){
          fetch('/data/get-data', {
                          method: "POST",
                          headers: { "Content-Type": "application/json" },
                          body: JSON.stringify({meta_data:{
                                    auth_token: "01",
                                    sender: "Localhost",
                                  },
                                data:{
                                  device_name: 'acl',
                                  db_name: 'pending_connections',
                                }})
                      })
            .then(response1 => response1.json())
            .then(responseData1 => {
              // Process response of the first request
              populatePendingDevices(responseData1)
              // Trigger the second request
              return fetch('/data/get-data', {
                          method: "POST",
                          headers: { "Content-Type": "application/json" },
                          body: JSON.stringify({meta_data:{
                                    auth_token: "01",
                                    sender: "Localhost",
                                  },
                                data:{
                                  device_name: 'acl',
                                  db_name: 'acl',
                                }})
                      })
            })
            .then(response2 => response2.json())
            .then(responseData2 => {
              // Process response of the second request
              populateDevices(responseData2)
              // Continue with additional logic or handle the combined result
            })
            .catch(error => {
              // Handle any errors that occur during the fetch requests
              console.error('Error:', error);
            });

        }
  body.sb-nav-fixed
    #layoutSidenav
      .mobile-menu
        input#hamburger(
          value="hamb" 
          name="hamb" 
          type="checkbox"
          )
        label(for="hamb") ☰
        ul.mobile
          li
            a.nav-link(href="index.html") Manage Devices
          li
            a.nav-link(href="/settings") Edit Resident Info
          li
            a.nav-link(href="index.html") Send data to...
      div(id="layoutSidenav_nav")
        nav#sidenavAccordion.sb-sidenav.accordion.sb-sidenav-dark
          .sb-sidenav-menu
            .nav
              a.nav-title RANIA
              a.nav-link-active Dashboard
              //- a.nav-link(href="/devices") Manage Devices
              //- a.nav-link(href="/settings") User Info
              //- a.nav-link(href="/agenda") Manage Your Agenda
          .sb-sidenav-footer
            .small Logged in as:
            | UserName
            button.db-button(type='button' onclick="window.location.href='/'") logout
      div(id="layoutSidenav_content")
        main
          .container-fluid.px-6
            h1.mt-4 Dashboard
            .row
              .col-1
                .card.timeCard
                  p(id="today_date") Today's Date
                  p(id="current_date")
                  script.
                    date = new Date();
                      year = date.getFullYear();
                      month = date.getMonth() + 1;
                      day = date.getDate();
                      document.getElementById("current_date").innerHTML = month + "/" + day + "/" + year;
                hr
                .card.notificationsCard
                  .card-body Notifications
                  .card-text
                    p Notifications
                  //- .card-footer.d-flex.align-items-center.justify-content-between
                hr
                .card.notificationsCard
                  .card-body Pending Connections
                    .card-text
                      table.userInfo-table#pending-conns-table
                        tbody
                          tr
                            th  Device Name
                            th  Connection Code
                            th  Accept
                            th  Reject
                          tr

              .col-2
                .card.deviceListCard
                  .card-body Devices
                    table.schedule-table#devices-table
                    hr
                    p#device-label

                    table.schedule-table
                      tr#available-data-table

                    div#data-area
                  //- .card-footer.d-flex.align-items-center.justify-content-between
                
                
  script(
    crossorigin="anonymous" 
    integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" 
    src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"
    )
  script(
    crossorigin="anonymous" 
    integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" 
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"
    )
